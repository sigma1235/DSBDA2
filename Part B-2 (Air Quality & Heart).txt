Group B-2

Perform the following operations using Python on the Air quality Data set , and Heart Diseases data sets: 

     a. Data cleaning
     b. Data integration
     c. Data transformation
     d. Error correcting
     e. Data model building

  Data set use:  1) Air quality Data set
                 2) Heart Diseases data sets


import pandas as pd
import numpy as np
df=pd.read_csv("AirQuality.csv",encoding='cp1252')


df.head(5)

df.describe()

df.shape

df.info()

df.isnull().sum()

df.describe()



1. Cleaning the Dataset :

Dropping columns - which do not provide more information
Dropping row where data is not available


df.info()

#  Dropping columns which are not required
df = df.drop(['stn_code','agency', 'location_monitoring_station'],axis=1) 

df.isna().sum()

df = df.dropna(subset=['date'])

df.isna().sum()

df.columns



2. Changing the types to uniform format :

df['type'].unique()


types = {
    
    "Residential" : "K",
    "Residential and others" : "RO",
    "Industrial Area":"I" ,
    "Industrial Areas" : "I",
    "Industrial" : "I" ,
    "Sensitive Area": "s",
    "Sensitive Areas":"s",
    "Sensitive":"s",
    "NaN":"PRO",
    "Residential, Rural and other Areas":"MO"
 }


df.type = df.type.replace(types)


df['type'].unique()


df.head()

df.info()



3. Data Transformation :   Filtering, cleaning, and other tranformations are another class of important operations.

df.nunique()

df.duplicated().sum()

df.drop_duplicates()



4. Error Correction :

df.isnull().sum()

df=df.fillna(df.median())
df.isnull().sum()

df.describe()

df[df['so2']>100]=0



5. Data Model Transformation : (Heart csv)

from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score


# Splitting our Dataset
X = df.drop('target', axis=1)
y = df.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)


from sklearn import svm
clf = svm.SVC(kernel='linear') 
clf.fit(X_train, y_train)
y_pred = clf.predict( X_test)


from sklearn import metrics
accuracy = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)


print("Precision:",metrics.precision_score(y_test, y_pred))
print("Recall:",metrics.recall_score(y_test, y_pred))